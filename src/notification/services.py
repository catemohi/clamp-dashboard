from json import dumps
from typing import Mapping, Literal, Any
from enum import Enum
from datetime import datetime

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer

from .models import NotificationMessage


CHANNEL_LAYER = get_channel_layer()


class IssueNotification(Enum):
    """–ö–ª–∞—Å—Å —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """

    NEW = 1
    CHANGED = 2
    CLOSED = 3
    BURNED = 4
    RETURNED = 5


def create_update_message(issue: Mapping, changed: Mapping) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏.
    –¢.–∫ –ø—Ä–∏–æ—Ä–µ—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –æ–¥–∏–Ω–∞–∫–æ–≤. –í–æ–∑–≤—Ä–∞—Ç–∏—Ç—å—Å—è —Å–∞–º–æ–µ –ø—Ä–µ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ
    —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

    Args:
        issue (Mapping): –æ–±—Ä–∞—â–µ–Ω–∏–µ
        changed (Mapping): –∏–∑–≤–µ–Ω–µ–Ω–∏—è

    Returns:
        str: —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    emodji = (lambda issue: '‚ù§Ô∏è' if issue['vip_contragent'] else '')(issue)
    message = ''
    if changed.get('return_to_work_time', False):
        message = (f'{emodji} –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–æ–º–µ—Ä '
                   f'{issue.get("number")} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '
                   f'{issue.get("return_to_work_time")}')

    if changed.get('step', False):
        message = (f'{emodji} –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {issue.get("number")} '
                   f'–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —à–∞–≥ {issue.get("step")}')

    if changed.get('responsible', False):
        message = (f'{emodji} –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä '
                   f'{issue.get("number")} –Ω–∞–∑–Ω–∞—á–µ–Ω(–∞) '
                   f'{issue.get("responsible")} —à–∞–≥ {issue.get("step")}')
    return message


def send_notification(issue: Mapping, *args, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
    """

    time = datetime.strftime(datetime.now(), '%d.%m.%y %H:%M:%S')

    if kwargs.get('type') == IssueNotification.CHANGED:
        message = create_update_message(issue, kwargs['changed'])
        result = (
            "clamp",
            {"type": "notification", "subtype": "updated", "issue": issue, "text": message, "time": time},
            )

    elif kwargs.get('type') == IssueNotification.NEW:
        group = (lambda issue: 'VIP –ª–∏–Ω–∏–∏' if issue['vip_contragent']
                 else '–ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏')(issue)
        emodji = (lambda issue: '‚ù§Ô∏è' if issue['vip_contragent']
                  else '')(issue)
        message = (f'{emodji} –ù–∞ {group} –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä '
                   f'{issue.get("number")}')
        result = (
            "clamp",
            {"type": "notification", "subtype": "new", "issue": issue, "text": message, "time": time},
            )

    elif kwargs.get('type') == IssueNotification.CLOSED:
        group = (lambda issue: 'VIP –ª–∏–Ω–∏–∏' if issue['vip_contragent']
                 else '–ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏')(issue)
        emodji = (lambda issue: '‚ù§Ô∏è' if issue['vip_contragent']
                  else '')(issue)
        message = (f'{emodji} –ù–∞ {group} –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å —à–∞–≥–∞ '
                   f'–æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {issue.get("number")}')
        result = (
            "clamp",
            {"type": "notification", "subtype": "closed", "issue": issue, "text": message,
             "time": time},
            )

    elif kwargs.get('type') == IssueNotification.RETURNED:
        group = (lambda issue: 'VIP –ª–∏–Ω–∏–∏' if issue['vip_contragent']
                 else '–ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏')(issue)
        message = (f'üß® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! –í {issue.get("return_to_work_time")} '
                   f'–Ω–∞ {group} c –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞ {issue.get("step")}'
                   f'–≤–µ—Ä–Ω–µ—Ç—Å—è –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {issue.get("number")}')
        result = (
            "clamp",
            {"type": "notification", "subtype": "returned", "issue": issue, "text": message,
             "time": time})

    elif kwargs.get('type') == IssueNotification.BURNED:
        group = (lambda issue: 'VIP –ª–∏–Ω–∏–∏' if issue['vip_contragent']
                 else '–ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏')(issue)
        message = (f'üß® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {issue.get("number")} '
                   f'–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {issue.get("responsible")} '
                   f'{issue.get("step_time") // 60} –º–∏–Ω—É—Ç!')
        result = (
            "clamp",
            {"type": "notification", "subtype": "burned", "issue": issue, "text": message,
             "time": time})

    NotificationMessage(text=result[1]["text"],
                        datetime=result[1]["time"],
                        issue=result[1]["issue"]).save()
    async_to_sync(CHANNEL_LAYER.group_send)(*result)


def get_notify(*args, slice: int = 0, **kwargs) -> list[dict]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –ë–î —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å slice –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–¥–∞—Å—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.

    Args:
        slice (int): –°—Ä–µ–∑. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.

    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    notify = NotificationMessage.objects.order_by('datetime').reverse()[:50]
    return notify


def send_report(sended_data: dict[Literal['dates', 'dashboard_data'], Any]):
    """
    """
    result = ("clamp", {"type": "reports", **sended_data})
    async_to_sync(CHANNEL_LAYER.group_send)(*result)


def send_count(sended_data: dict[Literal['first_line', 'vip_line'], Any]):
    """
    """
    result = ("clamp", {"type": "count", **sended_data})
    async_to_sync(CHANNEL_LAYER.group_send)(*result)
